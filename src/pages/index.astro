---
import ogimage from "../og.png";
const canonical = "" + new URL(Astro.url.pathname, Astro.site);
const ogurl = "" + new URL(ogimage?.src ?? "/og", Astro.site);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Remove Background Bulk</title>
    <link rel="canonical" href={canonical} />
    <meta
      name="description"
      content="Remove the background from your images in bulk for free"
    />
    <meta property="og:title" content="Remove Background Bulk" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta
      property="og:description"
      content="Remove the background from your images in bulk for free"
    />
    <meta property="og:image" content={ogurl} />
  </head>
  <body
    id="app"
    class="relative flex flex-col items-center h-full min-h-screen pt-4 bg-gradient-to-t from-neutral-100 to-white"
  >
    <a href="" class="absolute top-0 right-0 p-4 text-neutral-300">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="32"
        height="32"
        viewBox="0 0 24 24"
        ><path
          fill="currentColor"
          d="M11 9h2V7h-2m1 13c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m-1 15h2v-6h-2v6Z"
        ></path></svg
      >
    </a>
    <section class="w-full max-w-[120ch] mx-auto pt-4 px-8 text-neutral-600">
      <h1
        class="flex flex-wrap w-full pb-4 font-bold text-4xl md:text-5xl text-black"
      >
        <span>Remove</span>
        <span class="relative whitespace-nowrap text-blue-500">
          Background
          <span
            class="-ml-2 md:-ml-3 animate-pulse leading-none text-blue-300 text-sm"
            >Bulk</span
          >
        </span>
      </h1>
    </section>
    <section
      class="flex flex-col sm:flex-row items-end w-full max-w-[120ch] gap-4 mx-auto py-4 px-8"
    >
      <label
        name="uploadlabel"
        for="upload"
        class="cursor-pointer flex items-center justify-center gap-1 pl-2 pr-4 h-24 w-full hover:scale-[1.01] active:scale-100 rounded-lg border-dashed border-2 border-neutral-400 bg-white text-md sm:text-lg"
      >
        <input
          id="upload"
          name="upload"
          type="file"
          multiple="multiple"
          class="hidden"
        />
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="48"
          height="48"
          viewBox="0 0 24 24"
          class="w-[36px] sm:w-[48px] sm:mr-3 text-neutral-300 pointer-events-none"
          ><path
            fill="currentColor"
            d="M11 16V7.85l-2.6 2.6L7 9l5-5l5 5l-1.4 1.45l-2.6-2.6V16h-2Zm-5 4q-.825 0-1.413-.588T4 18v-3h2v3h12v-3h2v3q0 .825-.588 1.413T18 20H6Z"
          ></path></svg
        >
        <span class="pointer-events-none">
          Drag and drop or
          <span class="underline text-blue-500">Browse</span>
        </span>
      </label>
      <div class="flex flex-row sm:flex-col items-start gap-2">
        <label
          for="autodownload"
          class="flex items-center w-full gap-2 text-neutral-400"
        >
          <input
            type="checkbox"
            name="autodownload"
            id="autodownload"
            class="cursor-pointer mt-0.5"
          />
          Auto
        </label>
        <button
          name="download"
          class="mx-auto px-4 py-2 hover:scale-[1.025] active:scale-100 active:bg-blue-700 rounded-md border-2 border-blue-600 bg-blue-500 hover:bg-blue-600 font-bold text-white text-xl"
          >Download</button
        >
      </div>
    </section>
    <section
      name="gallery"
      class="flex flex-wrap items-center justify-center w-full gap-4 mb-auto py-4 lg:px-32"
    >
    </section>
    <footer
      class="flex items-center justify-between w-full py-1 px-2 text-sm text-neutral-400"
    >
      <span
        ><span class="hidden sm:inline">Powered by</span>
        <a
          href="https://github.com/imgly/background-removal-js"
          class="px-1 py-0.5 font-mono text-xs bg-neutral-200 text-blue-400"
          >@imgly/background-removal</a
        ></span
      >
      <a
        href="https://github.com/BryceRussell"
        class="flex items-center gap-1 hover:text-blue-400"
      >
        @BryceRussell
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="25"
          height="25"
          viewBox="0 0 24 24"
          ><path
            fill="currentColor"
            d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2Z"
          ></path></svg
        >
      </a>
    </footer>
    <template name="template">
      <img
        class="relative w-1/4 sm:w-1/5 md:w-1/6 h-auto outline outline-2 outline-offset-4 outline-transparent"
        height="100"
      />
    </template>
  </body>
</html>

<script>
  import imglyRemoveBackground, { Config } from "@imgly/background-removal";
  import JSZip from "jszip";
  import { bind, named } from "../util";

  interface Children {
    upload: HTMLInputElement;
    uploadlabel: HTMLLabelElement;
    gallery: HTMLScriptElement;
    template: HTMLTemplateElement;
    download: HTMLButtonElement;
    autodownload: HTMLInputElement;
  }

  bind<HTMLBodyElement>("#app", function () {
    const { upload, uploadlabel, template, gallery, download, autodownload } =
      named<Children>(this);

    const files = new Map();
    let uploads = 0;
    let current = 0;
    let garbage: string[] = [];

    // @ts-ignore
    const config: Config = {
      publicPath: "" + new URL(import.meta.env.BASE_URL, import.meta.env.SITE),
      fetchArgs: {
        mode: "no-cors",
      },
      progress: (key, status, total) => {
        if (key === "compute:inference") {
          if (status === 1) {
            console.log(`Finished!`);

            if (uploads > 1) {
              console.log("Aborting previous loop...");
              uploads--;
              return;
            }

            const el = gallery.children[current + 1] as HTMLImageElement;
            if (el) {
              current++;
              removeBg(el);
            } else {
              uploads--;
              if (autodownload.checked) downloadZip();
            }
          } else console.log(`Removing Background...`);
        } else console.log(`Downloading ${key}: ${status} of ${total}`);
      },
    };

    function handleUpload(input: FileList | null) {
      if (!input) return;

      uploads++;
      current = 0;
      files.clear();
      gallery.innerHTML = "";

      console.log("Revoking old file URLs");
      for (const url in garbage) {
        URL.revokeObjectURL(url);
      }

      for (const file of input) {
        const preview =
          template.content.firstElementChild?.cloneNode() as HTMLImageElement;

        files.set(preview, file);

        preview.dataset.name = file.name;

        const url = URL.createObjectURL(file);
        garbage.push(url);
        preview.src = url;

        gallery.append(preview);
      }

      removeBg(gallery.children[0] as HTMLImageElement);

      download.addEventListener("click", downloadZip);
    }

    function downloadZip() {
      const zip = new JSZip();

      for (const [element, file] of files) {
        if (element.dataset.complete !== "true") continue;
        zip.file(element.dataset.name, file);
      }

      zip.generateAsync({ type: "blob" }).then(function (content) {
        const blobUrl = URL.createObjectURL(content);

        const link = document.createElement("a");
        link.style.display = "none";
        link.download = "removebg.zip";
        link.href = blobUrl;
        document.body.appendChild(link);
        link.click();
        URL.revokeObjectURL(blobUrl);
        link.remove();
      });
    }

    function removeBg(element: HTMLImageElement) {
      if (!element.src) return;

      const reader = new FileReader();

      reader.onload = async (e) => {
        element.classList.toggle("outline-transparent");
        element.classList.toggle("outline-blue-500");
        element.classList.toggle("animate-pulse");
        try {
          const blob = await imglyRemoveBackground(element.src, config);
          const url = URL.createObjectURL(blob);
          garbage.push(url);
          files.set(element, blob);
          element.src = url;
          element.dataset.complete = "true";
          element.classList.toggle("outline-transparent");
          element.classList.toggle("outline-blue-500");
          element.classList.toggle("animate-pulse");
        } catch (error) {
          console.error("Background removal failed:", error);
        }
      };

      reader.readAsDataURL(files.get(element));
    }

    const uploadsvg = uploadlabel.children[1];

    uploadlabel.addEventListener("dragover", (event) => {
      event.preventDefault();
      uploadlabel.classList.add("animate-pulse");
      uploadlabel.classList.add("scale-[1.01]");
      uploadsvg.classList.add("animate-bounce");
    });

    uploadlabel.addEventListener("dragleave", (event) => {
      event.preventDefault();
      uploadlabel.classList.remove("animate-pulse");
      uploadlabel.classList.remove("scale-[1.01]");
      uploadsvg.classList.remove("animate-bounce");
    });

    uploadlabel.addEventListener("drop", (event) => {
      event.preventDefault();
      uploadlabel.classList.remove("animate-pulse");
      uploadlabel.classList.remove("scale-[1.01]");
      uploadsvg.classList.remove("animate-bounce");
      if (event.dataTransfer?.files) handleUpload(event.dataTransfer.files);
    });

    upload.addEventListener("change", () => {
      handleUpload(upload.files);
    });

    download.addEventListener("click", downloadZip);
  });
</script>

<style is:global>
  [name="gallery"] img:first-child:nth-last-child(1) {
    width: 60%;
  }
</style>
